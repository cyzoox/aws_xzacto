import React, { useState, useEffect } from 'react';
import { View, StyleSheet, ScrollView, TouchableOpacity, ActivityIndicator, useWindowDimensions } from 'react-native';
import { Text, Button, DataTable, Searchbar, Chip, FAB, Menu, Portal, Dialog, Divider } from 'react-native-paper';
import Appbar from '../../components/Appbar';
import { useNetworkStatus } from '../../hooks/useNetworkStatus';
import { colors } from '../../constants/theme';
import { generateClient } from 'aws-amplify/api';
import { listWarehouseProducts } from '../../graphql/queries';

// Constants
const LOW_STOCK_THRESHOLD = 10;

// Unique categories from products
const extractCategories = (products) => {
  const uniqueCategories = new Set();
  
  products.forEach(product => {
    if (product.category) {
      uniqueCategories.add(product.category);
    }
  });
  
  return Array.from(uniqueCategories).map(categoryName => ({
    id: categoryName,
    name: categoryName
  }));
};

const WarehouseInventoryScreen = ({ navigation, route }) => {
  const { staffData } = route.params || {};
  const { isOnline, hasPendingChanges } = useNetworkStatus();
  const client = generateClient();

  // State for warehouse data
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  
  // Local state
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [selectedProducts, setSelectedProducts] = useState([]);
  const [menuVisible, setMenuVisible] = useState(false);
  const [page, setPage] = useState(0);
  const [itemsPerPage, setItemsPerPage] = useState(10);
  const [sortBy, setSortBy] = useState('name');
  const [sortDirection, setSortDirection] = useState('ascending');
  const [showLowStock, setShowLowStock] = useState(false);
  
  // Fetch warehouse products
  const fetchWarehouseProducts = async () => {
    try {
      const productsData = await client.graphql({
        query: listWarehouseProducts,
        variables: {
          filter: { isActive: { eq: true } }
        }
      });
      
      const fetchedProducts = productsData.data.listWarehouseProducts.items;
      setProducts(fetchedProducts);
      
      // Extract unique categories
      const extractedCategories = extractCategories(fetchedProducts);
      setCategories(extractedCategories);
      
      return fetchedProducts;
    } catch (error) {
      console.error('Error fetching warehouse products:', error);
      return [];
    }
  };

  // Load data on component mount
  useEffect(() => {
    const loadData = async () => {
      setLoading(true);
      await fetchWarehouseProducts();
      setLoading(false);
    };
    
    loadData();
  }, []);
  
  // Handle refresh
  const handleRefresh = async () => {
    setRefreshing(true);
    await fetchWarehouseProducts();
    setRefreshing(false);
  };
  
  // Filter products based on search, category, and low stock
  const filteredProducts = products
    .filter(product => 
      product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      (product.sku && product.sku.toLowerCase().includes(searchQuery.toLowerCase()))
    )
    .filter(product => !selectedCategory || product.category === selectedCategory)
    .filter(product => !showLowStock || product.availableStock <= LOW_STOCK_THRESHOLD);
  
  // Sort products
  const sortedProducts = [...filteredProducts].sort((a, b) => {
    if (sortBy === 'name') {
      return sortDirection === 'ascending' 
        ? a.name.localeCompare(b.name) 
        : b.name.localeCompare(a.name);
    } else if (sortBy === 'stock') {
      return sortDirection === 'ascending' 
        ? a.availableStock - b.availableStock 
        : b.availableStock - a.availableStock;
    } else if (sortBy === 'price') {
      return sortDirection === 'ascending' 
        ? a.sellingPrice - b.sellingPrice 
        : b.sellingPrice - a.sellingPrice;
    }
    return 0;
  });
  
  // Pagination
  const from = page * itemsPerPage;
  const to = Math.min((page + 1) * itemsPerPage, sortedProducts.length);
  const paginatedProducts = sortedProducts.slice(from, to);

  const toggleSort = (field) => {
    if (sortBy === field) {
      setSortDirection(sortDirection === 'ascending' ? 'descending' : 'ascending');
    } else {
      setSortBy(field);
      setSortDirection('ascending');
    }
  };

  const handleCategorySelect = (category) => {
    setSelectedCategory(category === selectedCategory ? null : category);
  };

  const handleSelectProduct = (productId) => {
    if (selectedProducts.includes(productId)) {
      setSelectedProducts(selectedProducts.filter(id => id !== productId));
    } else {
      setSelectedProducts([...selectedProducts, productId]);
    }
  };

  const handleSelectAll = () => {
    if (selectedProducts.length === paginatedProducts.length) {
      setSelectedProducts([]);
    } else {
      setSelectedProducts(paginatedProducts.map(p => p.id));
    }
  };

  const handleAddBatchProducts = () => {
    navigation.navigate('WarehouseProductAdd');
  };

  const handleEditBatchProducts = () => {
    if (selectedProducts.length > 0) {
      navigation.navigate('WarehouseProductBatchEdit', { selectedProducts });
    }
  };

  const renderStockIndicator = (stock) => {
    if (stock <= 0) {
      return <Chip icon="alert" style={[styles.chip, styles.outOfStock]}>Out of Stock</Chip>;
    } else if (stock <= LOW_STOCK_THRESHOLD) {
      return <Chip icon="alert-outline" style={[styles.chip, styles.lowStock]}>Low Stock ({stock})</Chip>;
    } else {
      return <Text style={styles.stockText}>{stock}</Text>;
    }
  };

  const DataTable = ({
    page,
    to,
    from,
    handleSelectProduct,
    handleSelectAll,
    paginatedProducts,
    renderStockIndicator,
    selectedProducts,
  }) => {
    const { width } = useWindowDimensions();

    return (
      <View style={styles.tableContainer}>
        <DataTable>
          <DataTable.Header>
            <DataTable.Title style={styles.checkboxColumn}></DataTable.Title>
            <DataTable.Title 
              sortDirection={sortBy === 'name' ? sortDirection : 'none'}
              onPress={() => toggleSort('name')}
              style={width < 768 ? styles.nameColumnSmall : styles.nameColumn}
            >
              Product Name
            </DataTable.Title>
            <DataTable.Title style={width < 768 ? styles.skuColumnSmall : styles.skuColumn}>SKU</DataTable.Title>
            <DataTable.Title style={width < 768 ? styles.categoryColumnSmall : styles.categoryColumn}>Category</DataTable.Title>
            <DataTable.Title 
              numeric
              sortDirection={sortBy === 'price' ? sortDirection : 'none'}
              onPress={() => toggleSort('price')}
              style={width < 768 ? styles.priceColumnSmall : styles.priceColumn}
            >
              Price
            </DataTable.Title>
            <DataTable.Title 
              numeric
              sortDirection={sortBy === 'stock' ? sortDirection : 'none'}
              onPress={() => toggleSort('stock')}
              style={width < 768 ? styles.stockColumnSmall : styles.stockColumn}
            >
              Stock
            </DataTable.Title>
          </DataTable.Header>

          <ScrollView>
            {paginatedProducts.map(product => {
              const isSelected = selectedProducts.includes(product.id);
              const category = categories.find(c => c.id === product.category);
              
              return (
                <TouchableOpacity 
                  key={product.id} 
                  onPress={() => handleSelectProduct(product.id)}
                >
                  <DataTable.Row style={isSelected ? styles.selectedRow : null}>
                    <DataTable.Cell style={styles.checkboxColumn}>
                      <View style={[styles.checkbox, isSelected && styles.checkedBox]} />
                    </DataTable.Cell>
                    <DataTable.Cell style={width < 768 ? styles.nameColumnSmall : styles.nameColumn}>{product.name}</DataTable.Cell>
                    <DataTable.Cell style={width < 768 ? styles.skuColumnSmall : styles.skuColumn}>{product.sku || 'N/A'}</DataTable.Cell>
                    <DataTable.Cell style={width < 768 ? styles.categoryColumnSmall : styles.categoryColumn}>{category?.name || 'Uncategorized'}</DataTable.Cell>
                    <DataTable.Cell numeric style={width < 768 ? styles.priceColumnSmall : styles.priceColumn}>${product.sellingPrice?.toFixed(2) || '0.00'}</DataTable.Cell>
                    <DataTable.Cell numeric style={width < 768 ? styles.stockColumnSmall : styles.stockColumn}>
                      {renderStockIndicator(product.availableStock)}
                    </DataTable.Cell>
                  </DataTable.Row>
                </TouchableOpacity>
              );
            })}
            
            {paginatedProducts.length === 0 && (
              <DataTable.Row>
                <DataTable.Cell style={{ flex: 6, alignItems: 'center', justifyContent: 'center' }}>
                  <Text style={styles.emptyText}>No products found.</Text>
                </DataTable.Cell>
              </DataTable.Row>
            )}
          </ScrollView>

          <DataTable.Pagination
            page={page}
            numberOfPages={Math.ceil(sortedProducts.length / itemsPerPage)}
            onPageChange={page => setPage(page)}
            label={`${from + 1}-${to} of ${sortedProducts.length}`}
            showFastPaginationControls
            numberOfItemsPerPageList={[5, 10, 20]}
            numberOfItemsPerPage={itemsPerPage}
            onItemsPerPageChange={setItemsPerPage}
          />
        </DataTable>
      </View>
    );
  };

  if (loading && !refreshing) {
    return (
      <View style={[styles.container, styles.loadingContainer]}>
        <Appbar
          title="Warehouse Inventory"
          subtitle="Manage inventory and stock levels"
        />
        <ActivityIndicator size="large" color={colors.primary} />
        <Text style={styles.loadingText}>Loading inventory data...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <Appbar
        title="Warehouse Inventory"
        subtitle="Manage inventory and stock levels"
      />
      
      <View style={styles.content}>
        <View style={styles.searchContainer}>
          <Searchbar
            placeholder="Search products by name or SKU"
            onChangeText={setSearchQuery}
            value={searchQuery}
            style={styles.searchBar}
          />
          
          <Button 
            mode="outlined" 
            onPress={() => setMenuVisible(true)}
            style={styles.filterButton}
          >
            Filter
          </Button>
        </View>
        
        <ScrollView horizontal style={styles.categoriesContainer}>
          <Chip 
            selected={showLowStock}
            onPress={() => setShowLowStock(!showLowStock)}
            style={[styles.categoryChip, showLowStock && styles.selectedChip]}
          >
            Low Stock
          </Chip>
          <Divider style={styles.divider} />
          {categories
            .filter(cat => !cat._deleted)
            .map(category => (
              <Chip
                key={category.id}
                selected={selectedCategory === category.id}
                onPress={() => handleCategorySelect(category.id)}
                style={[
                  styles.categoryChip,
                  selectedCategory === category.id && styles.selectedChip
                ]}
              >
                {category.name}
              </Chip>
            ))}
        </ScrollView>
        
        <View style={styles.actionRow}>
          <Button 
            mode="contained" 
            onPress={handleSelectAll}
            style={styles.actionButton}
          >
            {selectedProducts.length === paginatedProducts.length && paginatedProducts.length > 0
              ? 'Deselect All'
              : 'Select All'}
          </Button>
          
          <Button 
            mode="contained" 
            disabled={selectedProducts.length === 0}
            onPress={handleEditBatchProducts}
            style={styles.actionButton}
          >
            Edit Selected
          </Button>
        </View>
        
        <ScrollView horizontal showsHorizontalScrollIndicator={true}>
          <DataTable 
            page={page}
            to={to}
            from={from}
            handleSelectProduct={handleSelectProduct}
            handleSelectAll={handleSelectAll}
            paginatedProducts={paginatedProducts}
            renderStockIndicator={renderStockIndicator}
            selectedProducts={selectedProducts}
          />
        </ScrollView>
      </View>
      
      <FAB
        style={styles.fab}
        icon="plus"
        onPress={handleAddBatchProducts}
        label="Add Products"
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  loadingContainer: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 12,
    fontSize: 16,
    color: '#666',
  },
  content: {
    flex: 1,
    padding: 16,
  },
  searchContainer: {
    flexDirection: 'row',
    marginBottom: 16,
  },
  searchBar: {
    flex: 1,
    marginRight: 8,
  },
  filterButton: {
    justifyContent: 'center',
  },
  categoriesContainer: {
    flexDirection: 'row',
    marginBottom: 16,
  },
  categoryChip: {
    marginRight: 8,
  },
  selectedChip: {
    backgroundColor: colors.primary,
  },
  divider: {
    height: '80%',
    width: 1,
    alignSelf: 'center',
    backgroundColor: '#ddd',
    marginHorizontal: 8,
  },
  actionRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 16,
  },
  actionButton: {
    marginRight: 8,
  },
  checkboxColumn: {
    flex: 0.5,
    paddingHorizontal: 4,
  },
  nameColumn: {
    flex: 3,
    paddingHorizontal: 8,
  },
  skuColumn: {
    flex: 1.5,
    paddingHorizontal: 8,
  },
  categoryColumn: {
    flex: 1.5,
    paddingHorizontal: 8,
  },
  priceColumn: {
    flex: 1.2,
    paddingHorizontal: 8,
  },
  stockColumn: {
    flex: 1.2,
    paddingHorizontal: 8,
  },
  checkbox: {
    width: 20,
    height: 20,
    borderRadius: 4,
    borderWidth: 2,
    borderColor: colors.primary,
  },
  checkedBox: {
    backgroundColor: colors.primary,
  },
  selectedRow: {
    backgroundColor: '#e3f2fd',
  },
  tableScroll: {
    width: '100%',
  },
  chip: {
    height: 24,
  },
  outOfStock: {
    backgroundColor: '#ffcdd2',
  },
  lowStock: {
    backgroundColor: '#ffecb3',
  },
  stockText: {
    textAlign: 'right',
  },
  emptyText: {
    textAlign: 'center',
    color: '#888',
  },
  fab: {
    position: 'absolute',
    margin: 16,
    right: 0,
    bottom: 0,
    backgroundColor: colors.primary,
  },
});

export default WarehouseInventoryScreen;
